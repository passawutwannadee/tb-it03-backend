// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: it03.sql

package postgresrepo

import (
	"context"
)

const iT03Count = `-- name: IT03Count :one
SELECT COUNT(*) FROM it03 WHERE deleted_at is NULL
`

func (q *Queries) IT03Count(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, iT03Count)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const iT03List = `-- name: IT03List :many
SELECT 
    i.id,
    i.name,
    i.reason,
    i.status_id,
    s.status
FROM it03 i
LEFT JOIN it03_statuses s ON i.status_id = s.id
WHERE deleted_at is NULL
ORDER BY i.id
`

type IT03ListRow struct {
	ID       int32   `json:"id"`
	Name     string  `json:"name"`
	Reason   string  `json:"reason"`
	StatusID int16   `json:"status_id"`
	Status   *string `json:"status"`
}

func (q *Queries) IT03List(ctx context.Context) ([]IT03ListRow, error) {
	rows, err := q.db.Query(ctx, iT03List)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IT03ListRow
	for rows.Next() {
		var i IT03ListRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Reason,
			&i.StatusID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const iT03Update = `-- name: IT03Update :many
WITH it03 AS (
    UPDATE it03
    SET
        name = COALESCE($2, name),
        reason = COALESCE($3, reason),
        status_id = COALESCE($4, status_id)
    WHERE id = ANY($1::int4[])
      AND deleted_at IS NULL
      AND it03.status_id = COALESCE($5, it03.status_id)
    RETURNING id, name, reason, status_id, created_at, updated_at, deleted_at
)
SELECT 
    u.id,
    u.name,
    u.reason,
    u.status_id,
    s.status
FROM it03 u
LEFT JOIN it03_statuses s ON u.status_id = s.id
`

type IT03UpdateParams struct {
	Column1      []int32 `json:"column_1"`
	Name         *string `json:"name"`
	Reason       *string `json:"reason"`
	StatusID     *int16  `json:"status_id"`
	WithStatusID *int16  `json:"with_status_id"`
}

type IT03UpdateRow struct {
	ID       int32   `json:"id"`
	Name     string  `json:"name"`
	Reason   string  `json:"reason"`
	StatusID int16   `json:"status_id"`
	Status   *string `json:"status"`
}

func (q *Queries) IT03Update(ctx context.Context, arg IT03UpdateParams) ([]IT03UpdateRow, error) {
	rows, err := q.db.Query(ctx, iT03Update,
		arg.Column1,
		arg.Name,
		arg.Reason,
		arg.StatusID,
		arg.WithStatusID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IT03UpdateRow
	for rows.Next() {
		var i IT03UpdateRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Reason,
			&i.StatusID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
