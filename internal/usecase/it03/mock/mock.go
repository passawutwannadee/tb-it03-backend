// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package it03_mock

import (
	"context"

	postgresrepo "github.com/passawutwannadee/tb-it03/internal/repo/postgres"
	"github.com/passawutwannadee/tb-it03/internal/usecase/it03"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// OffsetList provides a mock function for the type MockUseCase
func (_mock *MockUseCase) OffsetList(ctx context.Context) (*it03.PaginatedList, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for OffsetList")
	}

	var r0 *it03.PaginatedList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*it03.PaginatedList, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *it03.PaginatedList); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*it03.PaginatedList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUseCase_OffsetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OffsetList'
type MockUseCase_OffsetList_Call struct {
	*mock.Call
}

// OffsetList is a helper method to define mock.On call
//   - ctx
func (_e *MockUseCase_Expecter) OffsetList(ctx interface{}) *MockUseCase_OffsetList_Call {
	return &MockUseCase_OffsetList_Call{Call: _e.mock.On("OffsetList", ctx)}
}

func (_c *MockUseCase_OffsetList_Call) Run(run func(ctx context.Context)) *MockUseCase_OffsetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUseCase_OffsetList_Call) Return(paginatedList *it03.PaginatedList, err error) *MockUseCase_OffsetList_Call {
	_c.Call.Return(paginatedList, err)
	return _c
}

func (_c *MockUseCase_OffsetList_Call) RunAndReturn(run func(ctx context.Context) (*it03.PaginatedList, error)) *MockUseCase_OffsetList_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockUseCase
func (_mock *MockUseCase) Update(ctx context.Context, model *postgresrepo.IT03UpdateParams) ([]postgresrepo.IT03UpdateRow, error) {
	ret := _mock.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 []postgresrepo.IT03UpdateRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *postgresrepo.IT03UpdateParams) ([]postgresrepo.IT03UpdateRow, error)); ok {
		return returnFunc(ctx, model)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *postgresrepo.IT03UpdateParams) []postgresrepo.IT03UpdateRow); ok {
		r0 = returnFunc(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgresrepo.IT03UpdateRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *postgresrepo.IT03UpdateParams) error); ok {
		r1 = returnFunc(ctx, model)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUseCase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUseCase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - model
func (_e *MockUseCase_Expecter) Update(ctx interface{}, model interface{}) *MockUseCase_Update_Call {
	return &MockUseCase_Update_Call{Call: _e.mock.On("Update", ctx, model)}
}

func (_c *MockUseCase_Update_Call) Run(run func(ctx context.Context, model *postgresrepo.IT03UpdateParams)) *MockUseCase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*postgresrepo.IT03UpdateParams))
	})
	return _c
}

func (_c *MockUseCase_Update_Call) Return(iT03UpdateRows []postgresrepo.IT03UpdateRow, err error) *MockUseCase_Update_Call {
	_c.Call.Return(iT03UpdateRows, err)
	return _c
}

func (_c *MockUseCase_Update_Call) RunAndReturn(run func(ctx context.Context, model *postgresrepo.IT03UpdateParams) ([]postgresrepo.IT03UpdateRow, error)) *MockUseCase_Update_Call {
	_c.Call.Return(run)
	return _c
}
